openapi: '3.0.3'
info:
  title: Broker API
  description: API Spec for the Circular Entity Broker.
  version: 0.1.0
servers:
  - url: https://api.ceb.ltu.se/v1
  - url: https://api.ceb.rekursion.se/v1

components:
  schemas:
    Property:
      type: object
      properties:
        valueType:
          type: string
          description: Which type the value has, if `float` the broker will try to convert and throw an error if the value cannot be parset to a float.
          enum:
            - string
            - float
          example: "float"
        property:
          description: The property
          type: string
          example: "teethGrade"
        value:
          description: The value
          type: string
          example: "2.3"

    PropertyQuery:
      type: object
      properties:
        queryType:
          type: string
          description: How to compare this property when performing the query
          enum:
            - min
            - max
            - exact
          example: "exact"
        valueType:
          type: string
          description: Which type the value has, if `float` the broker will try to convert and throw an error if the value cannot be parset to a float.
          enum:
            - string
            - float
          example: "float"
        property:
          description: The property to search
          type: string
          example: "teethGrade"
        value:
          description: The value to compare to
          type: string
          example: "2.3"

    Query:
      type: object
      required:
        - query
      properties:
        limit:
          type: integer
          example: 100
        offset:
          type: integer
          example: 0
        query:
          type: array
          items:
            $ref: "#/components/schemas/PropertyQuery"

    ModifyProduct:
      type: object
      properties:
        properties:
          type: array
          items:
            $ref: "#/components/schemas/Property"


    Product:
      type: object
      properties:
        productId:
          $ref: "#/components/schemas/UUID4"
        properties:
          type: array
          items:
            $ref: "#/components/schemas/Property"

    CompanyAccessToken:
      type: object
      properties:
        companyId:
          $ref: "#/components/schemas/UUID4"
        accessToken:
          type: string
          description: A 64-byte access token in string hex format
          example: "063fc1d86c6074cccf9d9da0644d7c19ff98dad92ab008fa14895e0e2fcc37c73aaa7ecbca67095a90ab6fa2f2f8e5fc64d71290ec68b224a25088f8f6228993"

    UUID4:
      type: string
      example: "589a65f1-ea3f-4ba7-9ae4-9953a2b885d2"

    Error:
      type: object
      properties:
        code:
          type: integer
          example: 500
        message:
          type: string
          example: "Error parsing value"

  responses:
      Unauthorized:
        description: Unauthorized

      Error:
        description: Internal server error
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Error"

  securitySchemes:
    CompanyAccessToken:
      type: apiKey
      in: header
      name: X-API-CAT
      description: A Company Access Token, which is given when first registering the company. Consists of a 64-byte token in string hex format.

tags:
  - name: ProductQuerying
    description: Endpoints related to product creation and querying
  - name: CompanyRegister
    description: >
      Endpoints related to the creation, deletion and updating of companies and protected company data.
      All endpoints in this category except `POST /register` require a Company Access Token (CAT) sent in the X-API-CAT header in the HTTP request.

paths:
  /query:
    post:
      tags:
        - ProductQuerying
      requestBody:
        content: 
          application/json:
            schema:
              $ref: "#/components/schemas/Query"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/Error"
  /product:
    post:
      tags:
        - ProductQuerying
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ModifyProduct"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/Error"
    put:
      tags:
        - ProductQuerying
      parameters:
        - name: productId
          in: query
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ModifyProduct"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/Error"
    delete:
      tags:
        - ProductQuerying
      parameters:
        - name: productId
          in: query
          schema:
            type: string
      responses:
        "200":
          description: OK
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/Error"
  /components:
    get:
      tags:
        - ProductQuerying
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: "sawblade"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/Error"
  /properties:
    get:
      tags:
        - ProductQuerying
      requestBody:
        content: 
          application/json:
            schema: 
              type: string
              example: sawblade
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: "teethGrade"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/Error"

  /register:
    post:
      tags:
        - CompanyRegister
      description: Register a new company to receive an Access Token and upload product meta data
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Fake Company"

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CompanyAccessToken"
        "500":
          $ref: "#/components/responses/Error"
    delete:
      tags:
        - CompanyRegister
      security:
        - CompanyAccessToken: []
      description: Delete the company and all related data
      requestBody:
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/CompanyAccessToken"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CompanyAccessToken"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/Error"
  /interrogation:
    get:
      tags:
        - CompanyRegister
      security:
      - CompanyAccessToken: []
      description: Get all registered base URLs for interrogations
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: "https://fakecompany.ceb.ltu.se/v1"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/Error"
    post:
      tags:
        - CompanyRegister
      security:
      - CompanyAccessToken: []
      description: Register a new base URL for product data interrogations by the broker
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                  example: "https://fakecompany.ceb.ltu.se/v1"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    example: "https://fakecompany.ceb.ltu.se/v1"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/Error"
    delete:
      tags:
        - CompanyRegister
      security:
      - CompanyAccessToken: []
      description: Remove a URL for interrogations
      parameters:
        - name: url
          in: query
          schema:
            type: string
            example: "https://fakecompany.ceb.ltu.se/v1"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
                example: "https://fakecompany.ceb.ltu.se/v1"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/Error"
